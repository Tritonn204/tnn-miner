# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

stages:
  - build
  - test
  #- upload
  - release

variables:
  TNN_BUILD_MAC: false
  TNN_BUILD_WIN: false
  AMD64_TARGET_LEVEL: x86-64-v3
  PACKAGE_VERSION: "0.0.3"
  LINUX_AMD64_TGZ: "Tnn-miner-amd64-${PACKAGE_VERSION}.tar.gz"
  MACOS_ARM64_TGZ: "Tnn-miner-macos-arm64-${PACKAGE_VERSION}.tar.gz"
  WIN_AMD64_ZIP: "Tnn-miner-win64-${PACKAGE_VERSION}.zip"
  # https://docs.gitlab.com/ee/ci/runners/hosted_runners/macos.html#optimizing-homebrew
  HOMEBREW_NO_AUTO_UPDATE: 1

.macos_saas_runners:
  tags:
    - saas-macos-medium-m1
  image: macos-14-xcode-15
  before_script:
    - echo "started by ${GITLAB_USER_NAME} / @${GITLAB_USER_LOGIN}"
    - which clang
    #- brew install clang
    #- brew install fmt
    - brew install cmake

.windows_job:
  tags:
    - saas-windows-medium-amd64
  before_script:
    - Set-Variable -Name "time" -Value (date -Format "%H:%m")
    - echo ${time}
    - echo "started by ${GITLAB_USER_NAME} / @${GITLAB_USER_LOGIN}"

image: ubuntu:noble

build-linux:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  #before_script:
  #  - ./scripts/prereqs.sh
  #  #- apt update && apt -y install wget build-essential cmake clang libssl-dev libfmt-dev libudns-dev libc++-dev lld git
  script:
    - apt update && apt install -y dos2unix
    - dos2unix ./scripts/*.sh
    - ./scripts/prereqs.sh
    - export
    - mkdir ./build
    - cd ./build
    - cmake ..
    - make -j$(nproc)
    - cd ../
    - mv ./build/Tnn-miner ./Tnn-miner
    - tar -czvf ${LINUX_AMD64_TGZ} ./Tnn-miner
  after_script:
    - echo "LINUX_BUILD_JOB_ID=$CI_JOB_ID" >> linux-job.env
  artifacts:
    name: ${LINUX_AMD64_TGZ}
    paths:
      - ${LINUX_AMD64_TGZ}
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"
    reports:
      dotenv: linux-job.env

build-macos:
  rules:
    - if: $CI_COMMIT_TAG && $TNN_BUILD_MAC == "true"                 # Run this job when a tag is created
  extends:
    - .macos_saas_runners
  stage: build
  script:
    - export
    - mkdir ./build
    - cd ./build
    - cmake ..
    - make -j$(nproc)
    - cd ../
    - mv ./build/Tnn-miner ./Tnn-miner
    - ls -la ./
    - ls -la ./build/
    - tar -czvf Tnn-miner-macos-arm64.tar.gz ./Tnn-miner
  after_script:
    - pwd
    - ls -la ./
    - echo "MACOS_BUILD_JOB_ID=$CI_JOB_ID" >> macos-job.env
  artifacts:
    name: Tnn-miner-macos-arm64.tar.gz
    paths:
      - Tnn-miner-macos-arm64.tar.gz
    reports:
      dotenv: macos-job.env

build-windows:
  rules:
    - if: $CI_COMMIT_TAG && $TNN_BUILD_WIN == "true"                 # Run this job when a tag is created
  extends:
    - .windows_job
  stage: build
  script:
    - echo "running scripts in the build job"
    - $PSVersionTable.PSVersion
    - .\scripts\prereqs.bat ci
    - .\scripts\build.ps1 ci
    - dir .\build\
    - move build\Tnn-miner.exe .\
    - 7z.exe a ${WIN_AMD64_ZIP} Tnn-miner.exe
  after_script:
    - echo "WIN_BUILD_JOB_ID=$CI_JOB_ID" >> win-job.env
  artifacts:
    name: ${WIN_AMD64_ZIP}
    paths:
      - ${WIN_AMD64_ZIP}
    reports:
      dotenv: win-job.env


# run tests using the binary built before
test:
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  stage: test
  needs:
    - job: build-linux
      artifacts: true
  before_script:
    - apt update && apt -y install gdb unzip
    - ls -la ./
    - tar -xvf ${LINUX_AMD64_TGZ}
    - ls -la ./
  script:
    - tar -xvf ./${LINUX_AMD64_TGZ}
    - gdb --return-child-result --batch -ex "run" -ex "bt" -ex "cont" -ex "exit" --args ./Tnn-miner --dero-test

#upload:
#  stage: upload
#  image: curlimages/curl:latest
#  rules:
#    - if: $CI_COMMIT_TAG
#  script:
#    - ls -la
#    #- |
#    #  curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file bin/${DARWIN_AMD64_BINARY} "${PACKAGE_REGISTRY_URL}/${DARWIN_AMD64_BINARY}"
#    - |
#      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${LINUX_AMD64_BINARY} "${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}"
#  dependencies:
#    - "build"

# https://stackoverflow.com/a/67583488
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build-linux
      artifacts: true
    #- job: build-macos
    #  artifacts: true
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  script:
    - ls -la
    - echo $LINUX_BUILD_JOB_ID
    - echo $MACOS_BUILD_JOB_ID
    - echo $WIN_BUILD_JOB_ID
    #- |
    #  release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
    #    --assets-link "{\"name\":\"${LINUX_AMD64_BINARY}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${LINUX_AMD64_BINARY}\"}"
  release:
    name: 'Release $CI_COMMIT_TAG'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    description: 'Release $CI_COMMIT_TAG'
    assets:
      links:
        - name: "${LINUX_AMD64_TGZ}"
          url: "https://gitlab.com/${CI_PROJECT_PATH}/-/jobs/${LINUX_BUILD_JOB_ID}/artifacts/raw/${LINUX_AMD64_TGZ}"
          filepath: "/${LINUX_AMD64_TGZ}"
        #- name: "${MACOS_ARM64_TGZ}"
        #  url: "https://gitlab.com/${CI_PROJECT_PATH}/-/jobs/${MACOS_BUILD_JOB_ID}/artifacts/download"
        #  filepath: "/${MACOS_ARM64_TGZ}"
        #- name: "${WIN_AMD64_ZIP}"
        #  url: "https://gitlab.com/${CI_PROJECT_PATH}/-/jobs/${WIN_BUILD_JOB_ID}/artifacts/download"
        #  filepath: "/${WIN_AMD64_ZIP}"
